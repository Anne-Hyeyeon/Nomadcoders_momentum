[2.16 Recap]
1. ==는 동등연산자, 값만 같으면 true이다
2. ===는 일치연산자, 값과 값의 종류(Data Type)가 모두 같은지를 비교해서, 같으면 true, 다르면 false라고 한다.
3. ex)alert(1 == '1') //true
alert(1 === '1') //false
alert(null == undefined) //true
alert(null === undefined) //false
alert(true == 1); //true
alert(true === 1) //false
alert(true == '1') //true
alert(true === '1') //false
4. 배열형 : 배열의 데이터 값이 같더라도 배열을 할당할때, 각 변수는 각 메모리의 주소를 참조한다. 참조하는 메모리의 주소가 다르기 때문에 두 배열는 같지 않다.
var a = [1,2,3];
var b = [1,2,3];
console.log(a == b); // false
console.log(a === b); // false
5. 객체형도 배열형과 같다.
var x = {};
var y = {};
console.log(x == y) // false
console.log(x === y) // false
6. ==(동등연산자)보다는 ===(일치연산자)를 사용하자

[4-1]
- length: string의 길이 구하기.
- input의 유효성 검사를 작동시키기 위해서는, input은 form 안에 있어야 한다.
- form을 이용하면, 브라우저 자체의 기능을 이용할 수 있다. js코드 없이도.
- 이때, button을 클릭하면 form이 submit 되고 있다.
- 우리가 form 안에서 enter를 누르고, input이 더 존재하지 않는다면 자동으로 submit된다.
- 따라서 form을 이용하면, click이 아닌 form을 submit하는 것에 대해 고민하면 된다.
- form이 submit되는 걸 막으려면 어떻게 해야 할까?

[4-2]
- form을 submit할 때 value를 받아냄.
- 새로고침은 form submit의 기본 동작. (브라우저가 그러도록 프로그래밍 되어 있음.)
- 브라우저는 우선 onLoginAubmit function은 호출하고, 브라우저가 function을 실행시키지만 
브라우저는 브라우저 내에서 정보를 받아낸 후 unction을 실행시키는 것이다.

우리가 알고 있는 것 
submit -> 브라우저가 function 실행
onLoginAubmit();

실제
submit -> 브라우저가 정보 겟 -> (정보를 가진 채로) function 실행 
onLoginAubmit({information});

- 따라서, onsubmit시 브라우저는 argument를 받는다고 보면 된다. 

- EventListner function의 첫번째 argumnet는 항상 지금 막 벌어진 일들에 대한 정보가 된다.

- 우리는 space로, event에 대한 정보를 지닌 argument를 채워놓으면 된다.

[4-3]
js는 function 실행 전, 방금 전 실행된 event에 대한 정보를 가지게 된다.
- 우리가 이걸 사용하고 싶다면, space (argument를 받는 공간)가 필요하다.
- link를 입력하면, mouseevent가 뜨는데 user가 어디를 클릭했는지를 알려준다.
- 기억해야 할 것 : addEventListner안의 함수는 직접 실행하지 않는다. 내가 아니라, 브라우저가 직접 해주는 거다!

[4-4] Getting Username
목표 : 상대방이 input submit을 하고 나면, 이름 입력창을 hidden이라는 classname을 붙여서 없앤다.

-string만 있는 변수는 대문자로 하는 관습.
- string이랑 변수 하나로 합치기 : `` 사용
ex) `hello ${username}`;
1) 변수와 string을 결합하고 싶거나, 변수를 string안에 집어넣고 싶으면, 위 방법을 쓰면 된다.
2) 가장 중요한 규칙은 ``를 사용하는 것이다. ''도 아니고, ""도 아니다. (백틱)

[4-5] Saving Username
- localStorage를 이용하면 Browser에 무언가를 저장할 수 있다. 
- 개발자도구를 이용해서 localStorage에 저장된 내용을 볼 수 있다.
- localStorage API mdn 문서에서 보기!

값 저장 : localStorage.setItem(key, value)
값 불러오기 : localStorage.getItem(key)
값 지우기 : localStorage.removeItem(key)

[4-6] Loading Username
- localStorage에 값이 있으면, form을 보여주면 안된다.
localStorage의 유저 정보를 확인하는 법?

[5-1] Intervals
interval: '매번'일어나야 하는 무언가.
ex) 매 2초마다 무언가를 일어나게 하고 싶을 때!
- setInterval : 자바스크립트에 내장된 interval 기능
인자 1 : function
인자 2 : 시간

[5-2] Timeouts and Dates
- setTimeOut 얼마나 뒤에 실행시킬지를 정하는!
인자 1 : function
인자 2: 기다릴 시간

- 시계 만들기 : Date object(js에 이미 정의되어있는)

const date = New date();
date.getHours();
date.getFullYear();
등이 있음.

- 두 자리 초 (다음 영상)
- 웹사이트가 로드되자마자 바로 clock 실행
interval 앞 함수 바로 호출
- MDN의 date 문서 참고하기

[5-2 PadStart]
- 시계의 string을 문자 두 개로 채우기
- PadStart라는 기능으로 이미 만들어져 있음. 

padstart()
인자 1 : 자릿수
인자 2 : 빈 자리에 붙여넣을 숫자
string의 시작 부분을 늘려야하고, 길이가 2가 되어야한다고 알리는 기능.
길이가 2가 되지 않을 경우 붙일 문자열도 추가!

1) 시간, 분, 초 각각 변수로 선언
2) 숫자를 스트링으로 변환
3) padstart


[5-3 Quotes]
-Math.random 을 이용해서 랜덤 넘버를 뽑아보자!
하지만 소수점까지 랜덤숫자가 나와버린다 ㅠ 
- Math.random * 10 을 해주면 0~10사이의 숫자를 얻을 수 있지롱
- 꼬리 떼기
Integer가 아니라 float기 때문에 꼬리가 나온다. 
이때는 Math.round를 사용해보자. (숫자에 반올림시키는 기능)
Math.ceil은 숫자 올림해줌.
Math.floor은 숫자 내림해줌.

최종
Math.floor(Math.random() *10)

[5-4 Background]
- js에서 이미지를 만든 후 html에 삽입
- createElement 사용
- src 정보 입력 
- html의 body에 삽입 (js에만 존재하는 요소를)
- appendChild 사용

[6-0 setup]
자바스크립트는 막 발생한 이벤트를, 함수의 첫 번째 인자로 준다.

[6-1 Adding To dos]
인수 newTodo는 이름일 뿐이다! 받아오는 것에 대한 이름. potato가 되어도 동작함.
ul 안에 li 만들기 : appendChild
span 안에 값 넣기 : span.innterText = 

[6-2 Deleting to Dos]
- 버튼에 이벤트 리스너 넣기 (클릭)
- 어떤 li를 지울지 정해줘야한다.
- 각 li에서 발생하는click 이벤트 감지하기
- deleteTodo에서 event 받아서 console.log 한 후, path 들어가면 이벤트 일어나는 경로를 알 수 있다.
- event.target property으로 어떤 target을 눌렀는지 알 수 있다.
- parentNode, parentElement : 버튼의 부모는 누구인지 알 수 있다.
event.target.~
target이란, 클릭된 HTML element를 뜻한다.
이름.remove();

[6-3 Saving To Dos]
- To do list를 localStorage를 이용해 브라우저에 저장하기.
- Array 만든 다음, 텍스트가 만들어질때마다 Array에 push하기
- localStorage에는 텍스트만 저장 가능.
- 이렇게 localStorage에 array를 보내면, 텍스트만 저장이 된다.

- JSON.stringify(_)
object, array를 무조건 string으로 만들준다.

댓글
toDos.push(newToDo); 해서 toDos 라는 array에 newToDo (사용자가 input에 입력하는 텍스트)을 새로 추가(update) 하는 것. - array 를 업데이트 하기 위해서 .push를 쓰기 때문에-

JSON.stringify(ㅇㅇㅇ); 는 object 를 sting 으로 바꿔주는 역할을 한다.
localStorage에 저장할 때, array 는 저장할 수 없다. value는 string만 받기 때문에 JSON 하기 전에 상태는 value 가 array 로 받아주는 상태다. 이 array 들을 string으로 변환하기 위해서 JSON.stringify를 사용하는 것.

function은 hoisting 때문에 항상 위로 올라가도록 작성해야 한다.

[6-4. Loading To Dos part.1]
arrary를 stringify하면? 배열이 문자 그대로 스트링으로 저장된다.
JSON.stringify([1,2,3,4])
"[1,2,3,4]"

그러면 스트링을 다시 배열로 만드는방법은?
JSON.parse("["a","b","c"]")
자바스크립트는 배열에 있는 각각의 아이템에 대해 함수를 실행할 수 있게 해 준다.

foreach : 배열 요소의 각각에 function을 실행하게 해 준다.

하지만, foreach를 쓸 때 어떤 요소에서 무엇이 일어나는지 알 수 있으면 더 좋지 않을까? (function이 실행되는 요소에 대한 정보 )

submit이 event를 기본으로 제공해주듯, js는 처리되고 있는 item에 대한 정보도 기본으로 제공해준다.

자바스크립트는 배열의 item을 사용할 수 있게 해 준다!!!

function 새로 안 만들고 해보기

1) 원래


function sayHello(item){
    console.log("This is turn of" , item);
}

//if(savedToDOs ==! null)
if(savedToDos){
    const parsedToDos = JSON.parse(savedToDos);
    parsedToDos.forEach(sayHello);
}

2) 간단히
    parsedToDos.forEach((item) => console.log("this is turn of", item));
화살표 함수!


[6.5 Loading Todos Part2]
지난번에 배운 것
-JSON.stringify()
-JSON.parse()
-foreach
-화살표 함수

우리의 과제 : parsedToDos 안의 Array를 가지고, 그 item을 하나씩 나타내보자!

간단히 하는 법
    parsedToDos.forEach(paintToDo);
paintToDo는 텍스트를 받는데, 
js는 paintToDo에 텍스트를 넣어주기 때문이다. (array에 있는 각각의 아이템)

//여기까지 하면 어떤 문제가 발생하는가? 새로운 리스트를 추가했을 때, 기존 것이 사라지고 업데이트 되어버린다.

이유 : applicationdㅣ 시작할 때 toDo Array가 항상 비어있기 때문이다.

그래서 submit을 할 때마다 빈 array에다가 그냥 push를 하게 되어버린다.

따라서 toDos를 빈값으로 시작하는 게 아니라,
const를 let으로 바꿔서
localStorage에 toDo들이 있으면, parsedToDos를 넣어서 전에 있던 toDos를 복원하면 된다.

밑에서 toDos=parsedToDos로 지정하면
예전 배열 + 지금 배열까지 정보 가지고 있는 걸로 배열이 저장됨.

하지만 여기서 문제 : delete를 눌러도 좀비처럼 새로 살아남 
이유 : 스크린에서 지웠지만, localStorage에서 사라지지 않았기 때문임.

[6-6. Deleting To Dos part.1]
문제 해결하기! 로컬스토리지의 item이 삭제되지 않음!


우리가 구현한 딜리트는html에서 어떤 li를 지워야하는지는 알려주지만, 데이터베이스에서 어떤 아이템을 지워야 하는지는 알려주지 않는다.

방법 : toDo에 id 같은 걸 제공한다. 
object 만들기
ㄷx) [{id:12121, text:"drink"}, {id:13131, text:"hello"}];
객체 품은 배열~

- Date.now()는 현재 시간을 알려주는 함수고, 랜덤 숫자를 만들어주기도 한다.

function handleToDoSubmit(event) {
    event.preventDefault(); //submit 할 때 새로고침 방지
    const newTodo = toDoInput.value;
    //input의 value 변수에 저장
    toDoInput.value = "";
    //value 값 초기화
    toDos.push(newTodo);
    paintToDo(newTodo);
    saveToDos();
}

여기에서 toDos.push(newTodo)는 text만 푸쉬해줄 뿐이므로, id를 같이 넣어서 객체를 배열의 아이템으로 만들  방법을 고민해 보자.

newTodo를 Obj로 만드는 마법!
    const newTodoObj = {
        text:newTodo,
        id: Date.now(),
    };
이거를 배열에 푸쉬하면 된다.
그 뒤에 paintToDo에도 텍스트가 아니라 객체를 준다!!

하지만 문제점 -> object object 나옴
해결 ->     span.innerText = newTodoObj.text;   .text 붙이기

아이디는 언제 쓰나요? id로 각각의 li item 구분하기.

그렇다면 삭제를 위해, 우리가 x가 누른 li의 id를 얻으으려면 어떻게 해야할까?

(댓글)
리스트를 삭제하려고 할 때, 정확히 어떤 리스트를 삭제하는 지 알아야 하기 때문에 우리는 각 text(string?)에다가 고유의 id를 붙여줘서 정확히 내가 클릭한 리스트가 삭제되도록 해야 한다.

즉, text마다 고유의 id를 붙여주는 방법은 우리가 그동안 써왔던 newToDo(todoInput.value) 함수(text로만 이뤄졌음) 는 저리 구석에 치워두고 새로운 object(object는 리스트에 꼬리표?를 붙일 수 있으니까)를 생성해준다!

새로운 object를 어떻게 생성할까? 이름이 newToDoObj 라는 이름의 새로운 object를 만들어주자
const newToDoObj = {text: newToDo(있는 거 고대로~ 가져오자), id: date.now()};
여기서 알고 갈 것!! date.now(); 는 랜덤한 숫자를 생성해준다

새로운 object를 만들었으니 이 object를 제대로 활용해서 적용시켜야겠지?
어떻게 적용시켜야 하는지 addEventListener 부터 코드를 뒤져보자

submit이 됐고 handleToDoSubmit이 작동 됐고 새로고침 막고-> 사용자가 input에다 넣은 text를 newToDo 라는 변수로 저장 -> input에 적은 text가 계속 죽치는 게 싫어서 todoInput.value = ''; 로 해줬더니 빈칸으로 바뀌었네? -> 이 자리에 newToDoObj 라는 object가 저장되었네? -> toDos.push(newToDo) ???? toDos 라는 array에 업뎃되는 내용이 아직 newToDo로 되어 있잖아? 난, newToDoObj 로 바꾸려고 했으니까 toDos.push(newToDoObj);로 바꾸자! 그랬더니 text랑 id랑 같이 저장되네? -> paintToDo(newToDo) 이건 newToDo로 되어 있네? 혹시 newToDoObj로 바꿔줘야 하는 건 아닌가 paintToDo 함수를 살펴보자. 보니까 span.innerText = newToDo; (반복 언급하지만 이건 text만 갖고 있음 id는 없음)로 되어 있네? 그럼 얘도 newToDoObj가 필요한 애구나~ handleToDoSubmit에서 paintToDo(newToDoObj); 로 바꾸고(argument를 newToDoObj로 바꾼 거임★) 다시 paintToDo 함수에서 span.innerText 이 부분을 span.innerText = newToDo.text; 로 바꾸자(여기서 newToDo로 하는 이유는 매개변수parameter = newToDo 이기 때문! 이 부분이 이해 안 되면 function 기초를 다시 이해하고 올 것!). 자~ 바꿔서 봤더니... html를 보니 각 리스트마다 id가 안 붙어 있네? id도 붙어야 하는데? -> span.innerText 위에다가 li.id = newToDo.id; (해석: li변수에 id는 argument가 newToDoObj에 있는 id 입니다) 로 저장.

그러면 고유한 id딱지가 붙은 리스트가 완성된다



[6-7. Deleting To Dos part.2]
- forEach함수는 paintToDo를 item마다 실행시키는 함수이다.
- filter를 이용하면 지우고싶은 item을 제외하고 새 array를 만들 수 있다.

function sexyFilter(){

}

[1, 2, 3, 4].filter(sexyFilter)
1,2,3,4에 sexyFilter함수가 차례로 실행된다.

js가 sexyFilter를 4번 소환하고, 
sexyFilter(1) = 1
sexyFilter(2) = 2
sexyFilter(3) = 3
sexyFilter(4) = 4
이렇게 !

근데 만약에 
sexyFilter(3) = false다?
그러면 안들어간다!!!!



여기서 들어가는 sexyFilter같은 함수는, 반드시 true를 포함해야 한다.!!!

만약 false를 리턴하면, 그 item은 새 array에 포함되지 않는다.




1) 
function sexyFilter(){return true};

[1,2,3,4,5].filter(sexyFilter);
결과는
[1,2,3,4,5]

function sexyFilter(){return false};
[1.2.3.4.5].filter(sexyFilter);
결과는[];

2) 
function sexyFilter(item){return item !==3 }
결과는 [1,2,4,5]


연습
const arr = ["pizza", "banana", "tomato"];
function sexyFilter(food){
    return food ==! "banana" 
}
arr.filter(sexyFilter)
결과 ["pizza","banana"]


예시 2
const arr= [1234, 5454, 223, 122, 45, 6774, 334]
function sexyFilter(number){
    reutrn number <= 1000;
}
arr.filter(sexyFilter);
결과 [223,122,45,334]


filter가 item을 argument로 넣어줄 것이다!

[6-8. Deleting To Dos part.3]
filter는 array를 변경하지 않는다!
filter함수는 화살표 함수로 만들 수 있다.

예시
arr.filter(item => item >2)

하지만 이렇게 하면 변수의 type때문에 지우기가 안된다. type를 통일시켜줘야함. string과 number의 충돌!!!

[7.0 Geolocation]
navigator.geolocation.getCurrentPosition();

현재 위치를 불러오는 마법의 코드!
인자 1: 성공했을 때 실행될 함수
인자 2: 실패했을 때 실행될 함수

https://openweathermap.org/api

api란? (노마드코더 유튜브 참고) : 다른 서버오 이야기할 수 있는 방법

오늘은 openweathermap 서버와 얘기할것이다!

   const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}`;

   fetch(url)로 url 불러오기
   개발자도구 - 네트워크에 들어가면 과정을 볼 수 있다!
   javascript가 fetch 이용해 대신 url 불러온 걸 볼 수 있다.

화씨를 섭씨로 바꾸기 -> url에 &units=metric 붙이기

promise : 당장 뭔가 일어나지 않고, 시간이 좀 걸린 뒤 일어나는 것.
서버에 뭔가 물어봤는데 응답하는데 5분이 걸린다면? 무조건 5분을 기다려야 한다.
그때는 then을 사용해줘야 한다.
우리는 url fetch 뒤 response로 json을 받아야 한다.
